{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude40 WAT","text":"GitHub     -     PyPI     -     Documentation <p>Deep inspection of Python objects.</p> <p>WAT is a powerful inspection tool that allows you to delve into and examine unknown objects at runtime.</p> <p>\"Wat\" is a variant of the English word \"what\" that is often used to express confusion or disgust</p> <p>If you find yourself deep in the Python console, feeling lost and confused, and wondering \"WAT? What is this thing?\", that's where the <code>wat</code> inspector comes in handy.</p> <p>Start the Python Interpreter (or attach to one) and execute <code>wat / object</code> on any <code>object</code> to investigate its type, formatted value, variables, methods, parent types, signature, documentation, and even its source code. Alternatively, you can use <code>wat(object)</code> syntax.</p> <p></p>"},{"location":"#import","title":"Import","text":""},{"location":"#insta-load","title":"Insta-Load","text":"<p>If you want to quickly debug something, you can use this inspector without installing anything, in the same session.</p> <p>Load it on the fly by pasting this snippet to your Python interpreter: <pre><code>import base64, zlib\ncode = b'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'\nexec(zlib.decompress(base64.b64decode(code)).decode(), globals())\n</code></pre></p> <p>Now you can use <code>wat</code> object.</p> <p>Warning</p> <p>Before executing Insta-Load snippet, it's recommended to verify what you're about to run. You can either:</p> <ul> <li>Verify what's inside the extracted code beforehand:   <pre><code>print(zlib.decompress(base64.b64decode(code)).decode())\n</code></pre></li> <li>Paste the content of inspection.py into your interpreter.   It has the same effect.</li> <li>Install package with pip and review the code.</li> </ul>"},{"location":"#install-with-pip","title":"Install with pip","text":"<p>Alternatively, install wat-inspector package and import inspection tool from wat module: <pre><code>pip install wat-inspector\n</code></pre> <pre><code>import wat\n</code></pre></p>"},{"location":"#usage-modifiers","title":"Usage &amp; modifiers","text":"<p><code>wat</code> object can quickly inspect things by using the division operator (for faster typing without parentheses).  A short syntax <code>wat / foo</code> is equivalent to <code>wat(foo)</code>.</p> <p>You can call <code>wat.modifiers / foo</code> with the following modifiers:</p> <ul> <li><code>.short</code> or <code>.s</code> to hide the attributes (variables and methods inside the object)</li> <li><code>.dunder</code> to display dunder attributes (starting with <code>__</code>)</li> <li><code>.code</code> to reveal the source code of a function, method, or class</li> <li><code>.long</code> to show non-abbreviated values and docstrings</li> <li><code>.nodocs</code> to hide documentation for functions and classes</li> <li><code>.caller</code> to show how and where the inspection was called (works in files, not REPL)</li> <li><code>.all</code> to include all available information</li> <li><code>.ret</code> to return the inspected object</li> <li><code>.str</code> to return the output string instead of printing it</li> <li><code>.gray</code> to disable colorful output in the console</li> </ul> <p>You can chain modifiers, e.g. <code>wat.long.dunder.nodocs / foo</code>.</p> <p>Call <code>wat.locals</code> or <code>wat()</code> to inspect local variables. Call <code>wat.globals</code> to inspect global variables.</p> <p>Type <code>wat</code> in the interpreter to learn more about this object itself.</p> <p>There are several alternative syntaxes that are equivalent. Choose the one that works best for you: <pre><code>wat.short / 'foo'  # fast typing\nwat.short('foo')\nwat('foo', short=True)  # natural Python syntax\n'foo' | wat.short  # Unix piping\n</code></pre></p>"},{"location":"#use-case-examples","title":"Use Case Examples","text":""},{"location":"#determine-type","title":"Determine type","text":"<p>In a dynamic typing language like Python, it's often hard to determine the type of an object. WAT Inspector can help you with that by showing the name of the type with the module it comes from.</p> <pre><code>&gt;&gt;&gt; wat.short / (1,)\nvalue: (1,)\ntype: tuple\nlen: 1\n</code></pre> <pre><code>&gt;&gt;&gt; wat.short / {None}\nvalue: {None}\ntype: set\nlen: 1\n</code></pre> <pre><code>&gt;&gt;&gt; wat.short / user\nstr: admin\nrepr: &lt;User: admin&gt;\ntype: django.contrib.auth.models.User\nparents: django.contrib.auth.models.AbstractUser, django.contrib.auth.base_user.AbstractBaseUser, django.contrib.auth.models.PermissionsMixin, django.db.models.base.Model, django.db.models.utils.AltersData\n</code></pre> <p></p> <p>Now that you've identified the actual type, you can put the type annotations in your code to reduce further confusion.</p>"},{"location":"#look-up-methods","title":"Look up methods","text":"<p>By listing out methods with their signatures and docstrings, you can easily grasp how to use the unknown object.</p> <pre><code>wat / ['foo']\n</code></pre> <p> </p> <p>Use <code>wat.long</code> if you want to see full doscstrings.</p>"},{"location":"#discover-functions-signature","title":"Discover function's signature","text":"<p>See the docstrings and the signature of a function to learn how to use it.</p> <pre><code>wat / str.split\n</code></pre> <p></p>"},{"location":"#look-up-attributes","title":"Look up attributes","text":"<p>List the attribues and their types to see what's really inside the inspected object. <pre><code>wat / re.match('(\\d)_(.*)', '1_title')\n</code></pre></p> <p></p>"},{"location":"#explore-modules","title":"Explore modules","text":"<p>Another use case is to explore modules. You can list the functions, classes and sub-modules of a selected module.</p> <pre><code>import pathlib\nwat / pathlib\n</code></pre> <p></p> <p>Then, you can navigate further, e.g. <code>wat / pathlib.fnmatch</code>.</p>"},{"location":"#explore-dunder-attributes","title":"Explore dunder attributes","text":"<p>By default, WAT Inspector hides attributes starting with <code>__</code>. Use <code>wat.dunder</code> to see them. <pre><code>wat.dunder / {}\n</code></pre></p> <p></p>"},{"location":"#review-the-code","title":"Review the code","text":"<p>Look up the source code of a function to see how it really works.</p> <pre><code>wat.code / wat.__call__\n</code></pre> <p></p>"},{"location":"#prettify-unreadable-collections","title":"Prettify unreadable collections","text":"<p>Nested dictionaries and lists get nicely formatted, indented output:</p> <p></p>"},{"location":"#debug-with-breakpoint","title":"Debug with breakpoint","text":"<p>You can use Python's <code>breakpoint()</code> keyword to launch an interactive debugger in your program. Attach to the interpreter and inspect things on the spot.</p> <pre><code>(Pdb) import wat  # or paste Insta-Load snippet\n(Pdb) wat / foo  # inspect local variables\n...\n(Pdb) c  # continue execution\n</code></pre>"},{"location":"#look-up-local-variables","title":"Look up local variables","text":"<p>Use <code>wat.locals</code> or <code>wat.globals</code> to look up the local and global variables respectively.</p> <p></p>"},{"location":"#learn-python","title":"Learn Python","text":"<p>With these snippets you can better understand Python internals.</p> <pre><code>reversed([]) == reversed([])\n# False\nwat.s / reversed([])\n# value: &lt;list_reverseiterator object at 0x76749d1cb400&gt;\n# type: list_reverseiterator\n</code></pre> <pre><code>wat / type('ObjectCreator', (), {})\n# value: &lt;class '__main__.ObjectCreator'&gt;\n# type: type\n# signature: class ObjectCreator()\n</code></pre> <pre><code>from typing import List\nwat.s / List[str]\n# value: typing.List[str]\n# type: typing._GenericAlias\n# parents: typing._BaseGenericAlias, typing._Final\n# signature: def List(*args, **kwargs)\n\nwat(str | None)\n# value: str | None\n# type: types.UnionType\n</code></pre> <p>Explore Python built-ins: <pre><code>wat / __builtins__\nwat / ...\n</code></pre></p>"},{"location":"#inspect-wat-itself","title":"Inspect WAT itself","text":"<pre><code>wat.dunder / wat\nwat.code / wat.__truediv__\n</code></pre>"},{"location":"#environment-variables","title":"Environment variables","text":"<ul> <li><code>WAT_COLOR=\"false\"</code> to disable colorful output in the console.</li> <li><code>WAT_COLOR=\"true\"</code> to enforce colorful outputs even in non-tty environment.</li> </ul>"},{"location":"#references","title":"References","text":"<ul> <li>Inspired by Rich Inspect</li> </ul>"},{"location":"img/screenshot-playbook/","title":"Screenshot playbook","text":""},{"location":"img/screenshot-playbook/#wat-intro-setpng","title":"wat-intro-set.png","text":"<p><pre><code>python -m IPython\n</code></pre> <pre><code>import wat\nwat / {42}\n</code></pre></p>"},{"location":"img/screenshot-playbook/#wat-datetime-nowpng","title":"wat-datetime-now.png","text":"<ul> <li>terminal 90x27</li> <li><code>title wat</code></li> <li><code>python</code> <pre><code>import wat\nwat.str / datetime.datetime.now()\n</code></pre></li> </ul> <pre><code>wat_out = \"\\x1b[0;34m\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\x1b[0m\\n\\x1b[1;34mstr:\\x1b[0m \\x1b[0;32m2024-07-31 21:30:28.163527\\x1b[0m\\n\\x1b[1;34mrepr:\\x1b[0m \\x1b[1mdatetime.datetime(2024, 7, 31, 21, 30, 28, 163527)\\x1b[0m\\n\\x1b[1;34mtype:\\x1b[0m \\x1b[0;33mdatetime.datetime\\x1b[0m\\n\\x1b[1;34mparents:\\x1b[0m \\x1b[0;33mdatetime.date\\x1b[0m\\n\\n\\x1b[1mPublic attributes:\\x1b[0m\\n  \\x1b[1;33mday\\x1b[0;33m: \\x1b[0;33mint\\x1b[0m = \\x1b[0;31m31\\x1b[0m\\x1b[0m\\n  \\x1b[1;33mfold\\x1b[0;33m: \\x1b[0;33mint\\x1b[0m = \\x1b[0;31m0\\x1b[0m\\x1b[0m\\n  \\x1b[1;33mhour\\x1b[0;33m: \\x1b[0;33mint\\x1b[0m = \\x1b[0;31m21\\x1b[0m\\x1b[0m\\n  \\x1b[1;33mmax\\x1b[0;33m: \\x1b[0;33mdatetime.datetime\\x1b[0m = \\x1b[0;32m9999-12-31 23:59:59.999999\\x1b[0m\\x1b[0m\\n  \\x1b[1;33mmicrosecond\\x1b[0;33m: \\x1b[0;33mint\\x1b[0m = \\x1b[0;31m163527\\x1b[0m\\x1b[0m\\n  \\x1b[1;33mmin\\x1b[0;33m: \\x1b[0;33mdatetime.datetime\\x1b[0m = \\x1b[0;32m0001-01-01 00:00:00\\x1b[0m\\x1b[0m\\n  \\x1b[1;33mminute\\x1b[0;33m: \\x1b[0;33mint\\x1b[0m = \\x1b[0;31m30\\x1b[0m\\x1b[0m\\n  \\x1b[1;33mmonth\\x1b[0;33m: \\x1b[0;33mint\\x1b[0m = \\x1b[0;31m7\\x1b[0m\\x1b[0m\\n  \\x1b[1;33mresolution\\x1b[0;33m: \\x1b[0;33mdatetime.timedelta\\x1b[0m = \\x1b[0;32m0:00:00.000001\\x1b[0m\\x1b[0m\\n  \\x1b[1;33msecond\\x1b[0;33m: \\x1b[0;33mint\\x1b[0m = \\x1b[0;31m28\\x1b[0m\\x1b[0m\\n  \\x1b[1;33mtzinfo\\x1b[0;33m: \\x1b[0;33mNoneType\\x1b[0m = \\x1b[0;35mNone\\x1b[0m\\x1b[0m\\n  \\x1b[1;33myear\\x1b[0;33m: \\x1b[0;33mint\\x1b[0m = \\x1b[0;31m2024\\x1b[0m\\x1b[0m\\n\\n  \\x1b[0;34mdef \\x1b[1;32mastimezone\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# tz -&gt; convert to local time in new timezone tz\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32mcombine\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# date, time -&gt; datetime with same date and time fields\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32mctime\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# Return ctime() style string.\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32mdate\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# Return date object with same year, month and day.\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32mdst\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# Return self.tzinfo.dst(self).\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32mfromisocalendar\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# int, int, int -&gt; Construct a date from the ISO year, week number and weekday.\u2026\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32mfromisoformat\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# string -&gt; datetime from a string in most ISO 8601 formats\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32mfromordinal\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# int -&gt; date corresponding to a proleptic Gregorian ordinal.\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32mfromtimestamp\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# timestamp[, tz] -&gt; tz's local time from POSIX timestamp.\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32misocalendar\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# Return a named tuple containing ISO year, week number, and weekday.\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32misoformat\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# [sep] -&gt; string in ISO 8601 format, YYYY-MM-DDT[HH[:MM[:SS[.mmm[uuu]]]]][+HH:MM].\u2026\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32misoweekday\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# Return the day of the week represented by the date.\u2026\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32mnow\\x1b[0;32m(tz=None)\\x1b[0m \\x1b[2;37m# Returns new datetime object representing current time local to tz.\u2026\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32mreplace\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# Return datetime with new specified fields.\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32mstrftime\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# format -&gt; strftime() style string.\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32mstrptime\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# string, format -&gt; new datetime parsed from a string (like time.strptime()).\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32mtime\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# Return time object with same time but with tzinfo=None.\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32mtimestamp\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# Return POSIX timestamp as float.\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32mtimetuple\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# Return time tuple, compatible with time.localtime().\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32mtimetz\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# Return time object with same time and tzinfo.\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32mtoday\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# Current date or datetime:  same as self.__class__.fromtimestamp(time.time()).\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32mtoordinal\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# Return proleptic Gregorian ordinal.  January 1 of year 1 is day 1.\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32mtzname\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# Return self.tzinfo.tzname(self).\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32mutcfromtimestamp\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# Construct a naive UTC datetime from a POSIX timestamp.\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32mutcnow\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# Return a new datetime representing UTC day and time.\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32mutcoffset\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# Return self.tzinfo.utcoffset(self).\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32mutctimetuple\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# Return UTC time tuple, compatible with time.localtime().\\x1b[0m\\x1b[0m\\n  \\x1b[0;34mdef \\x1b[1;32mweekday\\x1b[0;32m(\u2026)\\x1b[0m \\x1b[2;37m# Return the day of the week represented by the date.\u2026\\x1b[0m\\x1b[0m\\n\\x1b[0;34m\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\x1b[0m\"\nRESET ='\\033[0m'\nSTYLE_BRIGHT = '\\033[1m'\nSTYLE_DIM = '\\033[2m'\nSTYLE_RED = '\\033[0;31m'\nSTYLE_BRIGHT_RED = '\\033[1;31m'\nSTYLE_GREEN = '\\033[0;32m'\nSTYLE_BRIGHT_GREEN = '\\033[1;32m'\nSTYLE_YELLOW = '\\033[0;33m'\nSTYLE_BRIGHT_YELLOW = '\\033[1;33m'\nSTYLE_BLUE = '\\033[0;34m'\nSTYLE_BRIGHT_BLUE = '\\033[1;34m'\nSTYLE_MAGENTA = '\\033[0;35m'\nSTYLE_CYAN = '\\033[0;36m'\nSTYLE_WHITE = '\\033[0;37m'\nSTYLE_GRAY = '\\033[2;37m'\n\noutput = '\\n'.join([\n    f'&gt;&gt;&gt; {STYLE_BRIGHT_GREEN}import {STYLE_BRIGHT_BLUE}wat{RESET}',\n    f'&gt;&gt;&gt; {STYLE_BRIGHT_GREEN}import {STYLE_BRIGHT_BLUE}datetime{RESET}',\n    f'&gt;&gt;&gt; wat / datetime.datetime.now()',\n    wat_out,\n])\nprint(output)\n</code></pre>"},{"location":"img/screenshot-playbook/#wat-nested-dict-prettypng","title":"wat-nested-dict-pretty.png","text":"<pre><code>wat.s / {\"people\":[{\"name\":\"Alice\",\"age\":21,\"pets\":None},{\"name\":\"Bob\", \"age\":42,\"pets\":['Kitty','Fluffy'],\"items\":[{'name':\"teapot\",\"price\":10.99,'in_stock':True}]}]}\n</code></pre>"}]}